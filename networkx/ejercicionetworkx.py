# -*- coding: utf-8 -*-
"""EjercicioNetworkx.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/140L93ZdBJMP5KjOPv07y-fxzm6Zpru-b
"""

pip install networkx

import networkx as nx
import matplotlib.pyplot as plt

class ArbolGramatica:
    def __init__(self, archivo_gramatica):
        self.V_t = set()  # Terminales
        self.V_nt = set()  # No terminales
        self.S = None  # Símbolo inicial
        self.P = []  # Producciones
        self.archivo_gramatica = archivo_gramatica
        self.procesar_gramatica()

    def leer_archivo_gramatica(self):
        # Leer el archivo de texto y devolver el contenido
        with open(self.archivo_gramatica, 'r') as archivo:
            return archivo.read()

    def procesar_gramatica(self):
        # Leer el archivo y procesar la gramática
        contenido = self.leer_archivo_gramatica()
        lineas = contenido.splitlines()
        for linea in lineas:
            if linea.startswith("S:"):
                self.S = linea.split(":")[1].strip()
                self.V_nt.add(self.S)
            elif "->" in linea:
                izquierda, derecha = linea.split("->")
                izquierda = izquierda.strip()
                derechas = [d.strip() for d in derecha.split("|")]
                self.P.append((izquierda, derechas))
                self.V_nt.add(izquierda)
                for d in derechas:
                    for char in d:
                        if char.islower():
                            self.V_t.add(char)
                        else:
                            self.V_nt.add(char)

    def construir_arbol(self):
        G = nx.DiGraph()  # Grafo dirigido
        G.add_node(self.S)

        def agregar_produccion_al_grafo(nodo, produccion):
            for prod in produccion:
                G.add_node(prod)
                G.add_edge(nodo, prod)

        for izquierda, derechas in self.P:
            for derecha in derechas:
                agregar_produccion_al_grafo(izquierda, derecha)

        return G

    def dibujar_arbol(self, G):
        posicion = nx.spring_layout(G)
        nx.draw(G, posicion, with_labels=True, node_size=3000, node_color="lightgreen", font_size=10, font_weight="bold")
        plt.show()

# Nombre del archivo gramatical
archivo_gramatica = 'gramatica.txt'

# Crear el árbol de la gramática desde el archivo .txt
arbol_gramatica = ArbolGramatica(archivo_gramatica)
G = arbol_gramatica.construir_arbol()

# Dibujar el árbol
arbol_gramatica.dibujar_arbol(G)